#!/bin/bash

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"
RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'
GREEN='\033[00;32m'
YELLOW='\033[00;33m'
BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'
LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'
OVERWRITE='\e[1A\e[K'

DOTFILES_LOG="$HOME/.dotfiles.log"

echo "LC_ALL=en_US.UTF-8" | sudo tee -a /etc/environment
echo "en_US.UTF-8 UTF-8" | sudo tee -a /etc/locale.gen
echo "LANG=en_US.UTF-8" | sudo tee -a /etc/locale.conf
LANG=C
LC_CTYPE=UTF-8
# sudo locale-gen en_US.UTF-8

# _header colorize the given argument with spacing
function _task {
	# if _task is called while a task was set, complete the previous
	if [[ $TASK != "" ]]; then
		printf "${OVERWRITE}${LGREEN} [âœ“]  ${LGREEN}${TASK}\n"
	fi
	# set new task title and print
	TASK=$1
	printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
	#create log if it doesn't exist
	if ! [[ -f $DOTFILES_LOG ]]; then
		touch $DOTFILES_LOG
	fi
	# empty conduro.log
	>$DOTFILES_LOG
	# hide stdout, on error we print and exit
	if eval "$1" 1>/dev/null 2>$DOTFILES_LOG; then
		return 0 # success
	fi
	# read error from log and add spacing
	printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"
	while read line; do
		printf "      ${line}\n"
	done <$DOTFILES_LOG
	printf "\n"
	# remove log file
	rm $DOTFILES_LOG
	# exit installation
	exit 1
}

set -e

# Paths
CONFIG_DIR="$HOME/.config/dotfiles"
VAULT_SECRET="$HOME/.ansible-vault/vault.secret"
DOTFILES_DIR="$HOME/.dotfiles"
SSH_DIR="$HOME/.ssh"
IS_FIRST_RUN="$HOME/.dotfiles_run"

unameOut="$(uname -s)"
case "${unameOut}" in
Linux*) machine=Linux ;;
Darwin*) machine=Mac ;;
CYGWIN*) machine=Cygwin ;;
MINGW*) machine=MinGw ;;
MSYS_NT*) machine=Git ;;
*) machine="UNKNOWN:${unameOut}" ;;
esac

# Install Ansible
if ! command -v ansible >/dev/null 2>&1; then

	if machine == "Mac"; then
		_task "Installing Ansible via Homebrew"
		# ensure brew is installed
		if ! command -v brew >/dev/null 2>&1; then
			_cmd "NONINTERACTIVE=1 /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
		fi
		_cmd "brew install ansible"
	fi

	if machine == "Linux"; then
		_task "Installing Ansible"
		_cmd "sudo apt-get update"
		_cmd "sudo apt-get install -y software-properties-common"
		_cmd "sudo apt-add-repository -y ppa:ansible/ansible"
		_cmd "sudo apt-get update"
		_cmd "sudo apt-get install -y ansible"
		_cmd "sudo apt-get install python3-argcomplete"
		_cmd "sudo activate-global-python-argcomplete3"
	fi
fi

# Clone repository
if ! [[ -d "$DOTFILES_DIR" ]]; then
	_task "Clone Repository..."
	_cmd "git clone --quiet "https://github.com/codepainter/dotfiles-v2.git" $DOTFILES_DIR"
else
	_task "Update Repository..."
	_cmd "git -C "$DOTFILES_DIR" pull --quiet"
fi

# Create path
pushd "$DOTFILES_DIR" 2>&1 >/dev/null

# Update Galaxy
_task "Update Ansible Galaxy..."
_cmd "ansible-galaxy install -r requirements.yml"

# Run playbook
_task "Running Ansible Playbook..."
if [[ -f $VAULT_SECRET ]]; then
	ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES_DIR/main.yml" --ask-become-pass "$@"
else
	ansible-playbook "$DOTFILES_DIR/main.yml" "$@"
fi

popd 2>&1 >/dev/null

if ! [[ -f "$IS_FIRST_RUN" ]]; then
	echo -e "${CHECK_MARK} ${GREEN}First run complete!${NC}"
	echo -e "${ARROW} ${CYAN}Please reboot your computer to complete the setup.${NC}"
	touch "$IS_FIRST_RUN"
fi
